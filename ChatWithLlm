import os
import json
import re
import sys
import io
import contextlib
import warnings
from typing import Optional, List, Any, Tuple
from PIL import Image
import streamlit as st
import pandas as pd
import base64
from io import BytesIO
from together import Together
from e2b_code_interpreter import Sandbox


def code_interpret(e2b_code_interpreter: Sandbox, code: str) -> Optional[List[Any]]:
    """Interprets the given E2B code and returns the result as a list of values"""
    pass
def match_code_blocks(llm_response: str) -> str:
    pass




def chat_with_llm(e2b_code_interpreter: Sandbox, user_message: str, dataset_path: str,dataset) -> Tuple[Optional[List[Any]], str]:
    
    # Read the dataset to get column information
    try:
        df = dataset
        columns_info = ", ".join(df.columns.tolist())
    except Exception as e:
        st.error(f"Error reading dataset: {e}")
        columns_info = "Unable to read column information"

    # Updated system prompt to include dataset path and columns information
    system_prompt = f"""You're a Python data scientist and data visualization expert. You are given a dataset at path '{dataset_path}'.
                    The dataset contains the following columns: {columns_info}

                    You need to analyze the dataset and answer the user's query with a response with one chunk of running Python code to solve them.
                    IMPORTANT: Always use the dataset path variable '{dataset_path}' in your code when reading the CSV file."""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_message},
    ]

    

    with st.spinner('Getting response from Together AI LLM model...'):
        client = Together(api_key=st.session_state.together_api_key)
        response = client.chat.completions.create(
            model=st.session_state.model_name,
            messages=messages,
        )

        response_message = response.choices[0].message
        python_code = match_code_blocks(response_message.content)
        
        if python_code:
            code_interpreter_results,text_output = code_interpret(e2b_code_interpreter, python_code)
            return code_interpreter_results, response_message.content,text_output
        else:
            st.warning(f"Failed to match any Python code in model's response")
            return None, response_message.content
        


def chat_with_llm2(e2b_code_interpreter: Sandbox, user_message: str, dataset_path: str,dataset) -> Tuple[Optional[List[Any]], str]:
    
    # Read the dataset to get column information
    try:
        df = dataset
        columns_info = ", ".join(df.columns.tolist())
        # Capture metadata as strings
        buffer = io.StringIO()
        df.info(buf=buffer)
        df_info_str = buffer.getvalue()
        df_head_str = df.head().to_string()

        df_describe_str = df.describe().to_string()
        df_nulls_str = df.isnull().sum().to_string()

    except Exception as e:
        st.error(f"Error reading dataset: {e}")
        columns_info = "Unable to read column information"

    system_prompt= f"""You're a Python data scientist. You are given a dataset at path '{dataset_path}'.

        ### Metadata Overview:
        - **Missing Values Per Column:**
        {df_nulls_str}

        - **Statistical Summary:**
        {df_describe_str}

        - **First Few Rows Preview:**
        {df_head_str}

        You need to analyze the dataset and follow the following instructions by providing one chunk of running Python code that solves the user problem.

        ### Instructions:
            you need to preprocess this dataset by performing the following tasks:
            1. Handling Missing Values:
            - For numerical columns: Fill missing values with the median.
            - For categorical columns: Fill missing values with the mode.
            2. Apply one-hot encoding to all categorical columns.
            3. Standardize all numerical columns using StandardScaler.
            4.Save the cleaned dataset to 'preprocessed_dataset.csv'.

        IMPORTANT:
        - Always use the dataset path variable '{dataset_path}' when reading the CSV file.
        - Ensure the code is efficient, readable, and provides meaningful insights or visualizations.
        - Format your response clearly and concisely.
        """

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_message},
    ]

    

    with st.spinner('Getting response from Together AI LLM model...'):
        client = Together(api_key=st.session_state.together_api_key)
        response = client.chat.completions.create(
            model=st.session_state.model_name,
            messages=messages,
        )

        response_message = response.choices[0].message
        python_code = match_code_blocks(response_message.content)
        
        if python_code:
            code_interpreter_results,text_output = code_interpret(e2b_code_interpreter, python_code)
            return code_interpreter_results, response_message.content,text_output
        else:
            st.warning(f"Failed to match any Python code in model's response")
            return None, response_message.content